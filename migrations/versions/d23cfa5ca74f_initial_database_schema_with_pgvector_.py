"""Initial database schema with pgvector support

Revision ID: d23cfa5ca74f
Revises: 
Create Date: 2025-07-25 20:14:21.194118

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import pgvector.sqlalchemy

# revision identifiers, used by Alembic.
revision: str = 'd23cfa5ca74f'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('api_keys',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('key_hash', sa.String(length=255), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('rate_limit', sa.Integer(), nullable=True),
    sa.Column('daily_quota', sa.Integer(), nullable=True),
    sa.Column('usage_count', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_used_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('key_hash')
    )
    op.create_index('idx_api_keys_active', 'api_keys', ['is_active'], unique=False, postgresql_where=sa.text('is_active = true'))
    op.create_index('idx_api_keys_expires', 'api_keys', ['expires_at'], unique=False)
    op.create_index('idx_api_keys_hash', 'api_keys', ['key_hash'], unique=False)
    op.create_table('semantic_links',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('from_entity_type', sa.String(length=50), nullable=False),
    sa.Column('from_entity_id', sa.UUID(), nullable=False),
    sa.Column('to_entity_type', sa.String(length=50), nullable=False),
    sa.Column('to_entity_id', sa.UUID(), nullable=False),
    sa.Column('relation', sa.String(length=100), nullable=False),
    sa.Column('weight', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_semantic_from', 'semantic_links', ['from_entity_type', 'from_entity_id'], unique=False)
    op.create_index('idx_semantic_relation', 'semantic_links', ['relation'], unique=False)
    op.create_index('idx_semantic_to', 'semantic_links', ['to_entity_type', 'to_entity_id'], unique=False)
    op.create_index('idx_semantic_weight', 'semantic_links', ['weight'], unique=False)
    op.create_table('topics',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('parent_topic_id', sa.UUID(), nullable=True),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['parent_topic_id'], ['topics.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_topics_embedding', 'topics', ['embedding'], unique=False, postgresql_using='ivfflat', postgresql_ops={'embedding': 'vector_cosine_ops'})
    op.create_index('idx_topics_name', 'topics', ['name'], unique=False)
    op.create_index('idx_topics_parent', 'topics', ['parent_topic_id'], unique=False)
    op.create_table('questions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('query', sa.Text(), nullable=False),
    sa.Column('topic_id', sa.UUID(), nullable=True),
    sa.Column('similar_to', sa.UUID(), nullable=True),
    sa.Column('correlation_id', sa.String(length=255), nullable=True),
    sa.Column('execution_id', sa.String(length=255), nullable=True),
    sa.Column('nodes_executed', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('execution_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['similar_to'], ['questions.id'], ),
    sa.ForeignKeyConstraint(['topic_id'], ['topics.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('correlation_id')
    )
    op.create_index('idx_questions_correlation', 'questions', ['correlation_id'], unique=False)
    op.create_index('idx_questions_created', 'questions', ['created_at'], unique=False)
    op.create_index('idx_questions_execution', 'questions', ['execution_id'], unique=False)
    op.create_index('idx_questions_execution_metadata', 'questions', ['execution_metadata'], unique=False, postgresql_using='gin')
    op.create_index('idx_questions_similar', 'questions', ['similar_to'], unique=False)
    op.create_index('idx_questions_topic', 'questions', ['topic_id'], unique=False)
    op.create_table('wiki_entries',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('topic_id', sa.UUID(), nullable=False),
    sa.Column('question_id', sa.UUID(), nullable=True),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('version', sa.Integer(), nullable=True),
    sa.Column('supersedes', sa.UUID(), nullable=True),
    sa.Column('sources', sa.ARRAY(sa.UUID()), nullable=True),
    sa.Column('related_topics', sa.ARRAY(sa.UUID()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], ),
    sa.ForeignKeyConstraint(['supersedes'], ['wiki_entries.id'], ),
    sa.ForeignKeyConstraint(['topic_id'], ['topics.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_wiki_created', 'wiki_entries', ['created_at'], unique=False)
    op.create_index('idx_wiki_source_question', 'wiki_entries', ['question_id'], unique=False)
    op.create_index('idx_wiki_supersedes', 'wiki_entries', ['supersedes'], unique=False)
    op.create_index('idx_wiki_topic_version', 'wiki_entries', ['topic_id', 'version'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_wiki_topic_version', table_name='wiki_entries')
    op.drop_index('idx_wiki_supersedes', table_name='wiki_entries')
    op.drop_index('idx_wiki_source_question', table_name='wiki_entries')
    op.drop_index('idx_wiki_created', table_name='wiki_entries')
    op.drop_table('wiki_entries')
    op.drop_index('idx_questions_topic', table_name='questions')
    op.drop_index('idx_questions_similar', table_name='questions')
    op.drop_index('idx_questions_execution_metadata', table_name='questions', postgresql_using='gin')
    op.drop_index('idx_questions_execution', table_name='questions')
    op.drop_index('idx_questions_created', table_name='questions')
    op.drop_index('idx_questions_correlation', table_name='questions')
    op.drop_table('questions')
    op.drop_index('idx_topics_parent', table_name='topics')
    op.drop_index('idx_topics_name', table_name='topics')
    op.drop_index('idx_topics_embedding', table_name='topics', postgresql_using='ivfflat', postgresql_ops={'embedding': 'vector_cosine_ops'})
    op.drop_table('topics')
    op.drop_index('idx_semantic_weight', table_name='semantic_links')
    op.drop_index('idx_semantic_to', table_name='semantic_links')
    op.drop_index('idx_semantic_relation', table_name='semantic_links')
    op.drop_index('idx_semantic_from', table_name='semantic_links')
    op.drop_table('semantic_links')
    op.drop_index('idx_api_keys_hash', table_name='api_keys')
    op.drop_index('idx_api_keys_expires', table_name='api_keys')
    op.drop_index('idx_api_keys_active', table_name='api_keys', postgresql_where=sa.text('is_active = true'))
    op.drop_table('api_keys')
    # ### end Alembic commands ###
