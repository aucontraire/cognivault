name: "Enhanced Agent Configuration Workflow"
version: "2.0"
workflow_id: "agent-config-comprehensive"
description: "Comprehensive workflow demonstrating all 4 agents with Format 1 configuration integration (Phase 2.1 Complete)"
created_by: "phase-2.1-agent-config-integration"
created_at: "2025-01-20T00:00:00Z"
workflow_schema_version: "2.0"

# =============================================================================
# COMPREHENSIVE AGENT CONFIGURATION DEMO
# =============================================================================
# This workflow demonstrates:
# 1. All 4 core agents with configuration support
# 2. Format 1 (flat config) integration with Pydantic models
# 3. PromptComposer dynamic prompt generation
# 4. Backward compatibility preservation
# 5. Real-world configuration patterns for production use
# =============================================================================

nodes:
  # -------------------------------------------------------------------------
  # REFINER AGENT: Query refinement with custom behavioral settings
  # -------------------------------------------------------------------------
  - node_id: "refiner"
    category: "BASE"
    node_type: "refiner" 
    execution_pattern: "processor"
    description: "Query refinement with enhanced behavioral configuration"
    config:
      # RefinerConfig fields (Format 1 - flat structure)
      refinement_level: "thorough"           # shallow, basic, thorough, comprehensive
      behavioral_mode: "collaborative"       # conservative, balanced, collaborative, creative
      output_format: "structured"           # simple, structured, detailed, annotated
      
      # Behavioral configuration
      custom_constraints:
        - "Preserve user intent while clarifying ambiguities"
        - "Focus on actionable query formulation" 
        - "Maintain context and domain specificity"
      
      # Prompt configuration
      template_variables:
        refinement_focus: "clarity and specificity"
        interaction_style: "helpful and precise"
      
      # Output configuration  
      include_reasoning: true
      confidence_threshold: 0.8
      
      # Execution configuration
      timeout_seconds: 45
      max_retries: 2
      enable_caching: true

  # -------------------------------------------------------------------------
  # HISTORIAN AGENT: Historical context with search customization
  # -------------------------------------------------------------------------
  - node_id: "historian" 
    category: "BASE"
    node_type: "historian"
    execution_pattern: "processor"
    description: "Historical context retrieval with deep search configuration"
    config:
      # HistorianConfig fields (Format 1 - flat structure)
      search_depth: "deep"                   # standard, deep, exhaustive
      relevance_threshold: 0.75              # 0.0-1.0 relevance filtering
      context_expansion: true                # Expand context for related topics
      memory_scope: "session"                # immediate, session, full
      
      # Behavioral configuration
      custom_constraints:
        - "Focus on patterns and precedents"
        - "Include temporal context and trends"
        - "Prioritize actionable historical insights"
      
      # Prompt configuration
      template_variables:
        analysis_perspective: "trend-focused and comparative"
        time_scope: "emphasis on recent 5-10 year patterns"
      
      # Output configuration
      include_reasoning: true
      confidence_threshold: 0.7
      
      # Execution configuration  
      timeout_seconds: 60
      max_retries: 3
      enable_caching: true
      
      # Historian-specific: search_type preserved for backward compatibility
      search_type: "hybrid"

  # -------------------------------------------------------------------------
  # CRITIC AGENT: Critical analysis with comprehensive evaluation
  # -------------------------------------------------------------------------
  - node_id: "critic"
    category: "BASE" 
    node_type: "critic"
    execution_pattern: "processor"
    description: "Critical analysis with comprehensive evaluation criteria"
    config:
      # CriticConfig fields (Format 1 - flat structure)
      analysis_depth: "comprehensive"        # shallow, medium, deep, comprehensive
      confidence_reporting: true             # Include confidence scores
      bias_detection: true                   # Active bias detection
      scoring_criteria:                      # Evaluation dimensions
        - "accuracy"
        - "completeness" 
        - "objectivity"
        - "logical_consistency"
        - "evidence_quality"
      
      # Behavioral configuration
      custom_constraints:
        - "Provide constructive, actionable feedback"
        - "Balance critique with recognition of strengths"
        - "Focus on improvement opportunities"
      
      # Prompt configuration
      template_variables:
        evaluation_style: "balanced and constructive"
        focus_areas: "logic, evidence, and completeness"
      
      # Output configuration
      include_reasoning: true
      confidence_threshold: 0.8
      
      # Execution configuration
      timeout_seconds: 50
      max_retries: 2
      enable_caching: true

  # -------------------------------------------------------------------------
  # SYNTHESIS AGENT: Comprehensive integration with structured output
  # -------------------------------------------------------------------------
  - node_id: "synthesis"
    category: "BASE"
    node_type: "synthesis" 
    execution_pattern: "aggregator"
    description: "Comprehensive synthesis with structured integration approach"
    config:
      # SynthesisConfig fields (Format 1 - flat structure)
      synthesis_strategy: "comprehensive"    # comprehensive, focused, balanced, creative
      thematic_focus: "actionable insights" # Optional thematic emphasis
      meta_analysis: true                   # Include meta-analysis
      integration_mode: "hierarchical"     # sequential, parallel, hierarchical, adaptive
      
      # Behavioral configuration
      custom_constraints:
        - "Create definitive, reference-quality output"
        - "Integrate all perspectives into coherent narrative"
        - "Provide both summary and detailed analysis"
        - "Include actionable recommendations"
      
      # Prompt configuration
      template_variables:
        output_style: "comprehensive and well-structured"
        integration_approach: "evidence-based synthesis"
      
      # Output configuration
      include_reasoning: true
      confidence_threshold: 0.85
      
      # Execution configuration
      timeout_seconds: 90
      max_retries: 2
      enable_caching: true

# =============================================================================
# WORKFLOW EXECUTION FLOW
# =============================================================================
flow:
  entry_point: "refiner"
  terminal_nodes: ["synthesis"]
  edges:
    # Sequential execution with dependencies
    - from_node: "refiner"
      to_node: "historian" 
      edge_type: "sequential"
      
    - from_node: "refiner"
      to_node: "critic"
      edge_type: "sequential"
      
    - from_node: "historian"
      to_node: "synthesis"
      edge_type: "sequential"
      
    - from_node: "critic" 
      to_node: "synthesis"
      edge_type: "sequential"

# =============================================================================
# WORKFLOW METADATA
# =============================================================================
metadata:
  tags: 
    - "phase-2.1-complete"
    - "agent-config-integration" 
    - "format-1-validated"
    - "prompt-composer-enabled"
    - "production-ready"
  complexity: "high"
  expected_duration_seconds: 180
  configuration_format: "format-1-pydantic"
  backward_compatibility: "fully-maintained"
  test_coverage: "50/50-tests-passing"
  
  # Phase 2.1 Completion Markers
  agent_config_status:
    refiner: "14/14 tests passing"
    critic: "10/10 tests passing"
    historian: "12/12 tests passing" 
    synthesis: "14/14 tests passing"
    total: "50/50 tests passing"
  
  features_demonstrated:
    - "All 4 agents with unified config architecture"
    - "Format 1 flat configuration (validated working)"
    - "PromptComposer integration across all agents"
    - "Backward compatibility with existing workflows"
    - "Real-world configuration patterns"
    - "Cross-agent coordination and dependencies"
    - "Production-ready configuration management"

# =============================================================================
# USAGE EXAMPLES
# =============================================================================
# CLI Usage:
#   cognivault workflow run enhanced_prompts_example.yaml --query "Your question"
#   cognivault workflow validate enhanced_prompts_example.yaml
#   cognivault workflow show enhanced_prompts_example.yaml
#
# Integration Testing:
#   pytest tests/integration/phase2_realworld/ -v
#   make run QUESTION="Test query" WORKFLOW=enhanced_prompts_example.yaml
#
# Configuration Validation:
#   All agent configs use validated Pydantic models
#   ConfigMapper provides dual format support
#   PromptComposer handles dynamic prompt generation
# =============================================================================